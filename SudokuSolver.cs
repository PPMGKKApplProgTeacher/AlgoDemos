using System;

namespace SudokuSolver
{
    /*
    Задача: Решаване на Судоку
    Напишете програма за решаване на Судоку, като попълвате празните клетки.

    Решението на судоку трябва да отговаря на всички следни правила:
    - Всяка от цифрите от 1 до 9 трябва да се появява точно веднъж във всеки ред.
    - Всяка от цифрите от 1 до 9 трябва да се появява точно веднъж във всяка колона.
    - Всяка от цифрите от 1 до 9 трябва да се появява точно веднъж във всеки 3x3 подмрежа.

    Символът '.' обозначава празни клетки.

    Ограничения:
    - board.length == 9
    - board[i].length == 9
    - board[i][j] е цифра или '.'
    - Вход без решение трябва да даде съобщение: "Няма налично решение."
    - Вход с повече от едно решение трябва да отпечата всички възможни решения.

    Примерен вход:
    board = new char[9][]
        {
            new char[] {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
            new char[] {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
            new char[] {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
            new char[] {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
            new char[] {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
            new char[] {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
            new char[] {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
            new char[] {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
            new char[] {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
        };
    Очакван резултат:
        5 3 4 6 7 8 9 1 2 
        6 7 2 1 9 5 3 4 8 
        1 9 8 3 4 2 5 6 7 
        8 5 9 7 6 1 4 2 3 
        4 2 6 8 5 3 7 9 1 
        7 1 3 9 2 4 8 5 6 
        9 6 1 5 3 7 2 8 4 
        2 8 7 4 1 9 6 3 5 
        3 4 5 2 8 6 1 7 9 

    Примерни тестове:
    Тест 1:
    Вход: board =  new char[9][]
        {
            new char[] {'.', '.', '9', '7', '4', '8', '.', '.', '.'},
            new char[] {'7', '.', '.', '.', '.', '.', '.', '.', '.'},
            new char[] {'.', '2', '.', '1', '.', '9', '.', '.', '.'},
            new char[] {'.', '.', '7', '.', '.', '.', '2', '4', '.'},
            new char[] {'.', '6', '4', '.', '1', '.', '5', '9', '.'},
            new char[] {'.', '9', '8', '.', '.', '.', '3', '.', '.'},
            new char[] {'.', '.', '.', '8', '.', '3', '.', '2', '.'},
            new char[] {'.', '.', '.', '.', '.', '.', '.', '.', '6'},
            new char[] {'.', '.', '.', '2', '7', '5', '9', '.', '.'}
        };
    Очакван резултат: 
        5 1 9 7 4 8 6 3 2 
        7 8 3 6 5 2 4 1 9 
        4 2 6 1 3 9 8 7 5 
        3 5 7 9 8 6 2 4 1 
        2 6 4 3 1 7 5 9 8 
        1 9 8 5 2 4 3 6 7 
        9 7 5 8 6 3 1 2 4 
        8 3 2 4 9 1 7 5 6 
        6 4 1 2 7 5 9 8 3 

    Тест 2:
    // Добавена е девятка горе вляво => не очакваме възможни решения
    Вход: board = new char[9][]
        {
            new char[] {'9', '.', '9', '7', '4', '8', '.', '.', '.'},
            new char[] {'7', '.', '.', '.', '.', '.', '.', '.', '.'},
            new char[] {'.', '2', '.', '1', '.', '9', '.', '.', '.'},
            new char[] {'.', '.', '7', '.', '.', '.', '2', '4', '.'},
            new char[] {'.', '6', '4', '.', '1', '.', '5', '9', '.'},
            new char[] {'.', '9', '8', '.', '.', '.', '3', '.', '.'},
            new char[] {'.', '.', '.', '8', '.', '3', '.', '2', '.'},
            new char[] {'.', '.', '.', '.', '.', '.', '.', '.', '6'},
            new char[] {'.', '.', '.', '2', '7', '5', '9', '.', '.'}
        };
    Очакван резултат: Няма възможни решения.

    Тест 3:
    Вход: board = new char[9][]
        {
            new char[] {'.', '3', '9', '.', '.', '.', '1', '2', '.'},
            new char[] {'.', '.', '.', '9', '.', '7', '.', '.', '.'},
            new char[] {'8', '.', '.', '4', '.', '1', '.', '.', '6'},
            new char[] {'.', '4', '2', '.', '.', '.', '7', '9', '.'},
            new char[] {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
            new char[] {'.', '9', '1', '.', '.', '.', '5', '4', '.'},
            new char[] {'5', '.', '.', '1', '.', '9', '.', '.', '3'},
            new char[] {'.', '.', '.', '8', '.', '5', '.', '.', '.'},
            new char[] {'.', '1', '4', '.', '.', '.', '8', '7', '.'}
        };
    Очакван резултат: 
        4 3 9 6 5 8 1 2 7 
        1 5 6 9 2 7 3 8 4 
        8 2 7 4 3 1 9 5 6 
        3 4 2 5 1 6 7 9 8 
        7 8 5 2 9 4 6 3 1 
        6 9 1 7 8 3 5 4 2 
        5 7 8 1 4 9 2 6 3 
        2 6 3 8 7 5 4 1 9 
        9 1 4 3 6 2 8 7 5 

        4 3 9 6 5 8 1 2 7 
        1 5 6 9 2 7 3 8 4 
        8 2 7 4 3 1 9 5 6 
        6 4 2 5 1 3 7 9 8 
        7 8 5 2 9 4 6 3 1 
        3 9 1 7 8 6 5 4 2 
        5 7 8 1 4 9 2 6 3 
        2 6 3 8 7 5 4 1 9 
        9 1 4 3 6 2 8 7 5 

    */

    // Клас за решението на судоку
    class SudokuSolver
    {
        // Метод за решаване на судоку (оставен празен за имплементация)
    }

    class Program
    {
        static void Main(string[] args)
        {
            // Примерен тест за решението на судоку
            char[][] board1 = new char[9][]
            {
                new char[] {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                new char[] {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                new char[] {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                new char[] {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                new char[] {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                new char[] {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                new char[] {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                new char[] {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                new char[] {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
            };

            char[][] board2 = new char[9][]
            {
                new char[] {'.', '.', '9', '7', '4', '8', '.', '.', '.'},
                new char[] {'7', '.', '.', '.', '.', '.', '.', '.', '.'},
                new char[] {'.', '2', '.', '1', '.', '9', '.', '.', '.'},
                new char[] {'.', '.', '7', '.', '.', '.', '2', '4', '.'},
                new char[] {'.', '6', '4', '.', '1', '.', '5', '9', '.'},
                new char[] {'.', '9', '8', '.', '.', '.', '3', '.', '.'},
                new char[] {'.', '.', '.', '8', '.', '3', '.', '2', '.'},
                new char[] {'.', '.', '.', '.', '.', '.', '.', '.', '6'},
                new char[] {'.', '.', '.', '2', '7', '5', '9', '.', '.'}
            };

            // Извикване на метода за решаване
            // SudokuSolver.SolveSudoku(board1);
            // SudokuSolver.SolveSudoku(board2);
        }
    }
}
